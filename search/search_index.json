{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"sudoku-tools \ud83d\udd17 Description \ud83d\udd17 This Python package is a collection of useful tools for generating, grading, solving, and transforming sudoku puzzles. Installation \ud83d\udd17 With Python installed, simply run the following command to add the package to your project. pip install sudoku-tools Usage \ud83d\udd17 The object can be constructed with a 1-dimensional board: arr_1d = [1, 0, 3, 4, 0, 4, 1, 0, 0, 3, 0, 1, 4, 0, 2, 3] puzzle = Puzzle(arr_1d, 0) ... or with a 2-dimensional board: arr_2d = [[1, 0, 3, 4], [0, 4, 1, 0], [0, 3, 0, 1], [4, 0, 2, 3]] puzzle = Puzzle(arr_2d, 0) Feel free to check out the docs for more information. License \ud83d\udd17 This software is released under the terms of MIT license .","title":"Overview"},{"location":"#sudoku-tools","text":"","title":"sudoku-tools"},{"location":"#description","text":"This Python package is a collection of useful tools for generating, grading, solving, and transforming sudoku puzzles.","title":"Description"},{"location":"#installation","text":"With Python installed, simply run the following command to add the package to your project. pip install sudoku-tools","title":"Installation"},{"location":"#usage","text":"The object can be constructed with a 1-dimensional board: arr_1d = [1, 0, 3, 4, 0, 4, 1, 0, 0, 3, 0, 1, 4, 0, 2, 3] puzzle = Puzzle(arr_1d, 0) ... or with a 2-dimensional board: arr_2d = [[1, 0, 3, 4], [0, 4, 1, 0], [0, 3, 0, 1], [4, 0, 2, 3]] puzzle = Puzzle(arr_2d, 0) Feel free to check out the docs for more information.","title":"Usage"},{"location":"#license","text":"This software is released under the terms of MIT license .","title":"License"},{"location":"documentation/","text":"sudoku \ud83d\udd17 sudoku.strategies \ud83d\udd17 sudoku.strategies.hidden_subset \ud83d\udd17 HiddenSubset Objects \ud83d\udd17 class HiddenSubset(Strategy) Apply the Hidden Subset strategy HiddenSingle Objects \ud83d\udd17 class HiddenSingle(HiddenSubset) The Hidden Single strategy sudoku.strategies.refresh_candidates \ud83d\udd17 RefreshCandidates Objects \ud83d\udd17 class RefreshCandidates(Strategy) Remove invalid candidates from each cell sudoku.strategies.strategy \ud83d\udd17 Strategy Objects \ud83d\udd17 class Strategy() Also known as a Solving Technique Attributes : name str - The name of the strategy difficulty float - The difficulty rating of the strategy defined with respect to eliminating a single candidate __call__ \ud83d\udd17 | __call__(puzzle: Puzzle[T]) -> int Apply the strategy to a given sudoku puzzle Arguments : puzzle Puzzle[T] - The sudoku puzzle Returns : int - The number of candidates eliminated by the strategy with a single pass over the sudoku puzzle sudoku.strategies.naked_subset \ud83d\udd17 NakedSubset Objects \ud83d\udd17 class NakedSubset(Strategy) Apply the Naked Subset strategy NakedSingle Objects \ud83d\udd17 class NakedSingle(NakedSubset) The Naked Single strategy ForcedDigit Objects \ud83d\udd17 class ForcedDigit(NakedSingle) Alias for the [[NakedSingle]] strategy SoleCandidate Objects \ud83d\udd17 class SoleCandidate(NakedSingle) Alias for the [[NakedSingle]] strategy NakedDouble Objects \ud83d\udd17 class NakedDouble(NakedSubset) Apply the Naked Double strategy NakedTriple Objects \ud83d\udd17 class NakedTriple(NakedSubset) Apply the Naked Triple strategy NakedQuad Objects \ud83d\udd17 class NakedQuad(NakedSubset) Apply the Naked Quad strategy sudoku.puzzle \ud83d\udd17 Puzzle Objects \ud83d\udd17 class Puzzle(Generic[T]) The base class for a sudoku puzzle. Args: Generic (T): The base type for each token in the sudoku puzzle Attributes: tokens (Tokens): A list of the tokens in use in the sudoku puzzle as identified by their integer aliases, which are the respective indices of this list. order (int): The number of unique tokens in use in the puzzle. For the common 9x9 sudoku puzzle, this value is 9. cells (List[Cell]): A list of all the cells in the sudoku puzzle. <a name=\"sudoku.puzzle.Puzzle.Tokens\"></a> ## Tokens Objects ```python class Tokens(List[T]) A list of the tokens in use in the sudoku puzzle as identified by their integer aliases, which are the respective indices of this list. swap \ud83d\udd17 | swap(i: int, j: int) Switch the positions of two sets of tokens in the puzzle by switching their respective aliases. Arguments : i int - The integer alias value associated with a token j int - The integer alias value associated with a token shuffle \ud83d\udd17 | shuffle() Randomly swap the tokens in the puzzle by randomizing their integer aliases. Cell Objects \ud83d\udd17 class Cell() The class for an individual cell in the sudoku puzzle Attributes : puzzle Puzzle[T] - The corresponding sudoku puzzle candidates Set[int] - A set of the cell's remaining candidates value int - The value of the sudoku cell or 0 if it is blank. is_blank \ud83d\udd17 | is_blank() -> bool Check whether the cell is blank or has a value. Returns : bool - A boolean value for whether the cell is blank. has_conflicts \ud83d\udd17 | has_conflicts() -> bool A method to determine if the board has any conflicting cells Returns : bool - True if the board has conflicts, False otherwise __init__ \ud83d\udd17 | __init__(iterable: Iterable[T], blank: T = None) The object can be constructed with a 1-dimensional board: ... or with a 2-dimensional board: arr_1d = [1, 0, 3, 4, 0, 4, 1, 0, 0, 3, 0, 1, 4, 0, 2, 3] puzzle = Puzzle(arr_1d, 0) arr_2d = [[1, 0, 3, 4], [0, 4, 1, 0], [0, 3, 0, 1], [4, 0, 2, 3]] puzzle = Puzzle(arr_2d, 0) Arguments : iterable Iterable[T] - An iterable representing a Sudoku board blank T - The value used to represent a blank cell reflect \ud83d\udd17 | reflect(direction: str = \"horizontal\") -> None Reflect the Sudoku board horizontally or vertically Arguments : direction str - The direction over which to reflect. Defaults to \"horizontal\". rotate \ud83d\udd17 | rotate(rotations=1) -> None Rotate the Sudoku board clockwise a given number in times. Arguments : rotations int - The number in clockwise rotations to be performed. This value may be negative and is rounded to the nearest integer. Defaults to 1. transpose \ud83d\udd17 | transpose() -> None Switch the rows and columns in the Sudoku board shuffle \ud83d\udd17 | shuffle() -> None Shuffle the board using rotations, reflections, and token-swapping to_1D \ud83d\udd17 | to_1D() -> List[T] A method for getting back the Sudoku board as a 1-dimensional array Returns : List[T] - A 1D array of the Sudoku board in the board's original type to_2D \ud83d\udd17 | to_2D() -> List[List[T]] A method for getting back the Sudoku board as a 2-dimensional array Returns : List[T] - A 2D array of the Sudoku board in the board's original type to_string \ud83d\udd17 | to_string() -> str A method for getting back the Sudoku board as a string Returns : str - A string representation in the Sudoku board to_formatted_string \ud83d\udd17 | to_formatted_string(cell_corner=\"\u253c\", box_corner=\"\u256c\", top_left_corner=\"\u2554\", top_right_corner=\"\u2557\", bottom_left_corner=\"\u255a\", bottom_right_corner=\"\u255d\", inner_top_tower_corner=\"\u2566\", inner_bottom_tower_corner=\"\u2569\", inner_left_floor_corner=\"\u2560\", inner_right_floor_corner=\"\u2563\", cell_horizontal_border=\"\u2500\", box_horizontal_border=\"\u2550\", cell_vertical_border=\"\u2502\", box_vertical_border=\"\u2551\", blank=\" \") -> str A method for getting back the Sudoku board as a formatted string Returns : str - A formatted string representing the Sudoku board is_solved \ud83d\udd17 | is_solved() -> bool Check whether the puzzle is solved Returns : bool - A boolean value indicating whether the puzzle is solved solve \ud83d\udd17 | solve(solver: Solver = StrategySolver) -> bool Solve the puzzle using one of the solvers Arguments : solver Solver, optional - The solver used to solve the puzzle. Defaults to StrategySolver. Returns : bool - A boolean value indicating whether the puzzle could be solved has_solution \ud83d\udd17 | has_solution() -> bool Check whether the puzzle is able to be solved Returns : bool - A boolean value indicating whether the puzzle has a solution rate \ud83d\udd17 | rate() -> float Calculate the difficulty of solving the puzzle Returns : float - A difficulty rating between 0 and 1 sudoku.solvers \ud83d\udd17 sudoku.solvers.solver \ud83d\udd17 Solver Objects \ud83d\udd17 class Solver() solve \ud83d\udd17 | solve(puzzle: Puzzle[T]) -> None Solve the puzzle in place. Arguments : puzzle Puzzle - The puzzle to be solved. sudoku.solvers.strategy_solver \ud83d\udd17 essential_strategies \ud83d\udd17 essential_strategies(order: int) -> Generator[Strategy] Generator for strategies from simple to complex with a given order StrategySolver Objects \ud83d\udd17 class StrategySolver(Solver) solve \ud83d\udd17 | solve(puzzle: Puzzle[T]) -> bool Solve the puzzle using strategies Returns : bool - A boolean value indicating whether the puzzle could be solved sudoku.examples \ud83d\udd17 sudoku.examples.rate \ud83d\udd17 sudoku.examples.shuffle \ud83d\udd17 sudoku.examples.solve \ud83d\udd17 sudoku.examples.boards \ud83d\udd17","title":"Documentation"},{"location":"documentation/#sudoku","text":"","title":"sudoku"},{"location":"documentation/#sudokustrategies","text":"","title":"sudoku.strategies"},{"location":"documentation/#sudokustrategieshidden_subset","text":"","title":"sudoku.strategies.hidden_subset"},{"location":"documentation/#hiddensubset-objects","text":"class HiddenSubset(Strategy) Apply the Hidden Subset strategy","title":"HiddenSubset Objects"},{"location":"documentation/#hiddensingle-objects","text":"class HiddenSingle(HiddenSubset) The Hidden Single strategy","title":"HiddenSingle Objects"},{"location":"documentation/#sudokustrategiesrefresh_candidates","text":"","title":"sudoku.strategies.refresh_candidates"},{"location":"documentation/#refreshcandidates-objects","text":"class RefreshCandidates(Strategy) Remove invalid candidates from each cell","title":"RefreshCandidates Objects"},{"location":"documentation/#sudokustrategiesstrategy","text":"","title":"sudoku.strategies.strategy"},{"location":"documentation/#strategy-objects","text":"class Strategy() Also known as a Solving Technique Attributes : name str - The name of the strategy difficulty float - The difficulty rating of the strategy defined with respect to eliminating a single candidate","title":"Strategy Objects"},{"location":"documentation/#__call__","text":"| __call__(puzzle: Puzzle[T]) -> int Apply the strategy to a given sudoku puzzle Arguments : puzzle Puzzle[T] - The sudoku puzzle Returns : int - The number of candidates eliminated by the strategy with a single pass over the sudoku puzzle","title":"__call__"},{"location":"documentation/#sudokustrategiesnaked_subset","text":"","title":"sudoku.strategies.naked_subset"},{"location":"documentation/#nakedsubset-objects","text":"class NakedSubset(Strategy) Apply the Naked Subset strategy","title":"NakedSubset Objects"},{"location":"documentation/#nakedsingle-objects","text":"class NakedSingle(NakedSubset) The Naked Single strategy","title":"NakedSingle Objects"},{"location":"documentation/#forceddigit-objects","text":"class ForcedDigit(NakedSingle) Alias for the [[NakedSingle]] strategy","title":"ForcedDigit Objects"},{"location":"documentation/#solecandidate-objects","text":"class SoleCandidate(NakedSingle) Alias for the [[NakedSingle]] strategy","title":"SoleCandidate Objects"},{"location":"documentation/#nakeddouble-objects","text":"class NakedDouble(NakedSubset) Apply the Naked Double strategy","title":"NakedDouble Objects"},{"location":"documentation/#nakedtriple-objects","text":"class NakedTriple(NakedSubset) Apply the Naked Triple strategy","title":"NakedTriple Objects"},{"location":"documentation/#nakedquad-objects","text":"class NakedQuad(NakedSubset) Apply the Naked Quad strategy","title":"NakedQuad Objects"},{"location":"documentation/#sudokupuzzle","text":"","title":"sudoku.puzzle"},{"location":"documentation/#puzzle-objects","text":"class Puzzle(Generic[T]) The base class for a sudoku puzzle. Args: Generic (T): The base type for each token in the sudoku puzzle Attributes: tokens (Tokens): A list of the tokens in use in the sudoku puzzle as identified by their integer aliases, which are the respective indices of this list. order (int): The number of unique tokens in use in the puzzle. For the common 9x9 sudoku puzzle, this value is 9. cells (List[Cell]): A list of all the cells in the sudoku puzzle. <a name=\"sudoku.puzzle.Puzzle.Tokens\"></a> ## Tokens Objects ```python class Tokens(List[T]) A list of the tokens in use in the sudoku puzzle as identified by their integer aliases, which are the respective indices of this list.","title":"Puzzle Objects"},{"location":"documentation/#swap","text":"| swap(i: int, j: int) Switch the positions of two sets of tokens in the puzzle by switching their respective aliases. Arguments : i int - The integer alias value associated with a token j int - The integer alias value associated with a token","title":"swap"},{"location":"documentation/#shuffle","text":"| shuffle() Randomly swap the tokens in the puzzle by randomizing their integer aliases.","title":"shuffle"},{"location":"documentation/#cell-objects","text":"class Cell() The class for an individual cell in the sudoku puzzle Attributes : puzzle Puzzle[T] - The corresponding sudoku puzzle candidates Set[int] - A set of the cell's remaining candidates value int - The value of the sudoku cell or 0 if it is blank.","title":"Cell Objects"},{"location":"documentation/#is_blank","text":"| is_blank() -> bool Check whether the cell is blank or has a value. Returns : bool - A boolean value for whether the cell is blank.","title":"is_blank"},{"location":"documentation/#has_conflicts","text":"| has_conflicts() -> bool A method to determine if the board has any conflicting cells Returns : bool - True if the board has conflicts, False otherwise","title":"has_conflicts"},{"location":"documentation/#__init__","text":"| __init__(iterable: Iterable[T], blank: T = None) The object can be constructed with a 1-dimensional board: ... or with a 2-dimensional board: arr_1d = [1, 0, 3, 4, 0, 4, 1, 0, 0, 3, 0, 1, 4, 0, 2, 3] puzzle = Puzzle(arr_1d, 0) arr_2d = [[1, 0, 3, 4], [0, 4, 1, 0], [0, 3, 0, 1], [4, 0, 2, 3]] puzzle = Puzzle(arr_2d, 0) Arguments : iterable Iterable[T] - An iterable representing a Sudoku board blank T - The value used to represent a blank cell","title":"__init__"},{"location":"documentation/#reflect","text":"| reflect(direction: str = \"horizontal\") -> None Reflect the Sudoku board horizontally or vertically Arguments : direction str - The direction over which to reflect. Defaults to \"horizontal\".","title":"reflect"},{"location":"documentation/#rotate","text":"| rotate(rotations=1) -> None Rotate the Sudoku board clockwise a given number in times. Arguments : rotations int - The number in clockwise rotations to be performed. This value may be negative and is rounded to the nearest integer. Defaults to 1.","title":"rotate"},{"location":"documentation/#transpose","text":"| transpose() -> None Switch the rows and columns in the Sudoku board","title":"transpose"},{"location":"documentation/#shuffle_1","text":"| shuffle() -> None Shuffle the board using rotations, reflections, and token-swapping","title":"shuffle"},{"location":"documentation/#to_1d","text":"| to_1D() -> List[T] A method for getting back the Sudoku board as a 1-dimensional array Returns : List[T] - A 1D array of the Sudoku board in the board's original type","title":"to_1D"},{"location":"documentation/#to_2d","text":"| to_2D() -> List[List[T]] A method for getting back the Sudoku board as a 2-dimensional array Returns : List[T] - A 2D array of the Sudoku board in the board's original type","title":"to_2D"},{"location":"documentation/#to_string","text":"| to_string() -> str A method for getting back the Sudoku board as a string Returns : str - A string representation in the Sudoku board","title":"to_string"},{"location":"documentation/#to_formatted_string","text":"| to_formatted_string(cell_corner=\"\u253c\", box_corner=\"\u256c\", top_left_corner=\"\u2554\", top_right_corner=\"\u2557\", bottom_left_corner=\"\u255a\", bottom_right_corner=\"\u255d\", inner_top_tower_corner=\"\u2566\", inner_bottom_tower_corner=\"\u2569\", inner_left_floor_corner=\"\u2560\", inner_right_floor_corner=\"\u2563\", cell_horizontal_border=\"\u2500\", box_horizontal_border=\"\u2550\", cell_vertical_border=\"\u2502\", box_vertical_border=\"\u2551\", blank=\" \") -> str A method for getting back the Sudoku board as a formatted string Returns : str - A formatted string representing the Sudoku board","title":"to_formatted_string"},{"location":"documentation/#is_solved","text":"| is_solved() -> bool Check whether the puzzle is solved Returns : bool - A boolean value indicating whether the puzzle is solved","title":"is_solved"},{"location":"documentation/#solve","text":"| solve(solver: Solver = StrategySolver) -> bool Solve the puzzle using one of the solvers Arguments : solver Solver, optional - The solver used to solve the puzzle. Defaults to StrategySolver. Returns : bool - A boolean value indicating whether the puzzle could be solved","title":"solve"},{"location":"documentation/#has_solution","text":"| has_solution() -> bool Check whether the puzzle is able to be solved Returns : bool - A boolean value indicating whether the puzzle has a solution","title":"has_solution"},{"location":"documentation/#rate","text":"| rate() -> float Calculate the difficulty of solving the puzzle Returns : float - A difficulty rating between 0 and 1","title":"rate"},{"location":"documentation/#sudokusolvers","text":"","title":"sudoku.solvers"},{"location":"documentation/#sudokusolverssolver","text":"","title":"sudoku.solvers.solver"},{"location":"documentation/#solver-objects","text":"class Solver()","title":"Solver Objects"},{"location":"documentation/#solve_1","text":"| solve(puzzle: Puzzle[T]) -> None Solve the puzzle in place. Arguments : puzzle Puzzle - The puzzle to be solved.","title":"solve"},{"location":"documentation/#sudokusolversstrategy_solver","text":"","title":"sudoku.solvers.strategy_solver"},{"location":"documentation/#essential_strategies","text":"essential_strategies(order: int) -> Generator[Strategy] Generator for strategies from simple to complex with a given order","title":"essential_strategies"},{"location":"documentation/#strategysolver-objects","text":"class StrategySolver(Solver)","title":"StrategySolver Objects"},{"location":"documentation/#solve_2","text":"| solve(puzzle: Puzzle[T]) -> bool Solve the puzzle using strategies Returns : bool - A boolean value indicating whether the puzzle could be solved","title":"solve"},{"location":"documentation/#sudokuexamples","text":"","title":"sudoku.examples"},{"location":"documentation/#sudokuexamplesrate","text":"","title":"sudoku.examples.rate"},{"location":"documentation/#sudokuexamplesshuffle","text":"","title":"sudoku.examples.shuffle"},{"location":"documentation/#sudokuexamplessolve","text":"","title":"sudoku.examples.solve"},{"location":"documentation/#sudokuexamplesboards","text":"","title":"sudoku.examples.boards"}]}