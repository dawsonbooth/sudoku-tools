{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"sudoku-tools \ud83d\udd17 Description \ud83d\udd17 This Python package is a collection of useful tools for generating, grading, solving, and transforming sudoku puzzles. Installation \ud83d\udd17 With Python installed, simply run the following command to add the package to your project. pip install sudoku-tools Usage \ud83d\udd17 The object can be constructed with a 1-dimensional board: arr_1d = [1, 0, 3, 4, 0, 4, 1, 0, 0, 3, 0, 1, 4, 0, 2, 3] puzzle = Puzzle(arr_1d, 0) ... or with a 2-dimensional board: arr_2d = [[1, 0, 3, 4], [0, 4, 1, 0], [0, 3, 0, 1], [4, 0, 2, 3]] puzzle = Puzzle(arr_2d, 0) Feel free to check out the docs for more information. License \ud83d\udd17 This software is released under the terms of MIT license .","title":"Overview"},{"location":"#sudoku-tools","text":"","title":"sudoku-tools"},{"location":"#description","text":"This Python package is a collection of useful tools for generating, grading, solving, and transforming sudoku puzzles.","title":"Description"},{"location":"#installation","text":"With Python installed, simply run the following command to add the package to your project. pip install sudoku-tools","title":"Installation"},{"location":"#usage","text":"The object can be constructed with a 1-dimensional board: arr_1d = [1, 0, 3, 4, 0, 4, 1, 0, 0, 3, 0, 1, 4, 0, 2, 3] puzzle = Puzzle(arr_1d, 0) ... or with a 2-dimensional board: arr_2d = [[1, 0, 3, 4], [0, 4, 1, 0], [0, 3, 0, 1], [4, 0, 2, 3]] puzzle = Puzzle(arr_2d, 0) Feel free to check out the docs for more information.","title":"Usage"},{"location":"#license","text":"This software is released under the terms of MIT license .","title":"License"},{"location":"documentation/","text":"sudoku \ud83d\udd17 sudoku.strategies \ud83d\udd17 Strategy Objects \ud83d\udd17 class Strategy() Also known as a Solving Technique RefreshCandidates Objects \ud83d\udd17 class RefreshCandidates(Strategy) Remove invalid candidates from each cell HiddenSubset Objects \ud83d\udd17 class HiddenSubset(Strategy) Apply the Hidden Subset strategy HiddenSingle Objects \ud83d\udd17 class HiddenSingle(HiddenSubset) The Hidden Single strategy NakedSubset Objects \ud83d\udd17 class NakedSubset(Strategy) Apply the Naked Subset strategy NakedSingle Objects \ud83d\udd17 class NakedSingle(NakedSubset) The Naked Single strategy ForcedDigit \ud83d\udd17 Alias for the [[NakedSingle]] strategy NakedDouble Objects \ud83d\udd17 class NakedDouble(NakedSubset) Apply the Naked Double strategy NakedTriple Objects \ud83d\udd17 class NakedTriple(NakedSubset) Apply the Naked Triple strategy NakedQuad Objects \ud83d\udd17 class NakedQuad(NakedSubset) Apply the Naked Quad strategy strategies \ud83d\udd17 strategies(order: PerfectSquare) Generator for strategies from simple to complex with a given order sudoku.puzzle \ud83d\udd17 Puzzle Objects \ud83d\udd17 class Puzzle() The object can be constructed with a 1-dimensional board: ... or with a 2-dimensional board: arr_1d = [1, 0, 3, 4, 0, 4, 1, 0, 0, 3, 0, 1, 4, 0, 2, 3] puzzle = Puzzle(arr_1d, 0) arr_2d = [[1, 0, 3, 4], [0, 4, 1, 0], [0, 3, 0, 1], [4, 0, 2, 3]] puzzle = Puzzle(arr_2d, 0) Arguments : list - An iterable representing a Sudoku board blank - The value used to represent a blank cell has_conflicts \ud83d\udd17 | has_conflicts() -> bool A method to determine if the board has any conflicting cells Returns : bool - True if the board has conflicts, False otherwise reflect \ud83d\udd17 | reflect(direction=\"horizontal\") -> None Reflect the Sudoku board horizontally or vertically Arguments : direction str - The direction in reflection rotate \ud83d\udd17 | rotate(rotations=1) -> None Rotate the Sudoku board clockwise a given number in times. Arguments : rotations int - The number in clockwise rotations to be performed. This value may be negative and will be rounded. transpose \ud83d\udd17 | transpose() -> None Switch the rows and columns in the Sudoku board shuffle \ud83d\udd17 | shuffle() -> None Shuffle the board using rotations, reflections, and token-swapping to_1D \ud83d\udd17 | to_1D() A method for getting back the Sudoku board as a 1-dimensional array Returns : A 1D array in the Sudoku board to_2D \ud83d\udd17 | to_2D() A method for getting back the Sudoku board as a 2-dimensional array Returns : A 2D array in the Sudoku board to_string \ud83d\udd17 | to_string() -> str A method for getting back the Sudoku board as a string Returns : str - A string representation in the Sudoku board to_formatted_string \ud83d\udd17 | to_formatted_string(cell_corner=\"\u253c\", box_corner=\"\u256c\", top_left_corner=\"\u2554\", top_right_corner=\"\u2557\", bottom_left_corner=\"\u255a\", bottom_right_corner=\"\u255d\", inner_top_tower_corner=\"\u2566\", inner_bottom_tower_corner=\"\u2569\", inner_left_floor_corner=\"\u2560\", inner_right_floor_corner=\"\u2563\", cell_horizontal_border=\"\u2500\", box_horizontal_border=\"\u2550\", cell_vertical_border=\"\u2502\", box_vertical_border=\"\u2551\", blank=\" \") -> str A method for getting back the Sudoku board as a formatted string Returns : str - A formatted string representing the Sudoku board is_solved \ud83d\udd17 | is_solved() -> bool Check whether puzzle is solved solve \ud83d\udd17 | solve() -> Dict[str, int] Solve the puzzle with strategies has_solution \ud83d\udd17 | has_solution() -> bool Return whether the puzzle can be solved using strategies rate \ud83d\udd17 | rate() -> float Calculate the difficulty of solving the puzzle Returns : float - A difficulty score between 0 and 1 sudoku.types \ud83d\udd17 sudoku.examples \ud83d\udd17 sudoku.examples.rate \ud83d\udd17 sudoku.examples.shuffle \ud83d\udd17 sudoku.examples.solve \ud83d\udd17 sudoku.examples.boards \ud83d\udd17","title":"Documentation"},{"location":"documentation/#sudoku","text":"","title":"sudoku"},{"location":"documentation/#sudokustrategies","text":"","title":"sudoku.strategies"},{"location":"documentation/#strategy-objects","text":"class Strategy() Also known as a Solving Technique","title":"Strategy Objects"},{"location":"documentation/#refreshcandidates-objects","text":"class RefreshCandidates(Strategy) Remove invalid candidates from each cell","title":"RefreshCandidates Objects"},{"location":"documentation/#hiddensubset-objects","text":"class HiddenSubset(Strategy) Apply the Hidden Subset strategy","title":"HiddenSubset Objects"},{"location":"documentation/#hiddensingle-objects","text":"class HiddenSingle(HiddenSubset) The Hidden Single strategy","title":"HiddenSingle Objects"},{"location":"documentation/#nakedsubset-objects","text":"class NakedSubset(Strategy) Apply the Naked Subset strategy","title":"NakedSubset Objects"},{"location":"documentation/#nakedsingle-objects","text":"class NakedSingle(NakedSubset) The Naked Single strategy","title":"NakedSingle Objects"},{"location":"documentation/#forceddigit","text":"Alias for the [[NakedSingle]] strategy","title":"ForcedDigit"},{"location":"documentation/#nakeddouble-objects","text":"class NakedDouble(NakedSubset) Apply the Naked Double strategy","title":"NakedDouble Objects"},{"location":"documentation/#nakedtriple-objects","text":"class NakedTriple(NakedSubset) Apply the Naked Triple strategy","title":"NakedTriple Objects"},{"location":"documentation/#nakedquad-objects","text":"class NakedQuad(NakedSubset) Apply the Naked Quad strategy","title":"NakedQuad Objects"},{"location":"documentation/#strategies","text":"strategies(order: PerfectSquare) Generator for strategies from simple to complex with a given order","title":"strategies"},{"location":"documentation/#sudokupuzzle","text":"","title":"sudoku.puzzle"},{"location":"documentation/#puzzle-objects","text":"class Puzzle() The object can be constructed with a 1-dimensional board: ... or with a 2-dimensional board: arr_1d = [1, 0, 3, 4, 0, 4, 1, 0, 0, 3, 0, 1, 4, 0, 2, 3] puzzle = Puzzle(arr_1d, 0) arr_2d = [[1, 0, 3, 4], [0, 4, 1, 0], [0, 3, 0, 1], [4, 0, 2, 3]] puzzle = Puzzle(arr_2d, 0) Arguments : list - An iterable representing a Sudoku board blank - The value used to represent a blank cell","title":"Puzzle Objects"},{"location":"documentation/#has_conflicts","text":"| has_conflicts() -> bool A method to determine if the board has any conflicting cells Returns : bool - True if the board has conflicts, False otherwise","title":"has_conflicts"},{"location":"documentation/#reflect","text":"| reflect(direction=\"horizontal\") -> None Reflect the Sudoku board horizontally or vertically Arguments : direction str - The direction in reflection","title":"reflect"},{"location":"documentation/#rotate","text":"| rotate(rotations=1) -> None Rotate the Sudoku board clockwise a given number in times. Arguments : rotations int - The number in clockwise rotations to be performed. This value may be negative and will be rounded.","title":"rotate"},{"location":"documentation/#transpose","text":"| transpose() -> None Switch the rows and columns in the Sudoku board","title":"transpose"},{"location":"documentation/#shuffle","text":"| shuffle() -> None Shuffle the board using rotations, reflections, and token-swapping","title":"shuffle"},{"location":"documentation/#to_1d","text":"| to_1D() A method for getting back the Sudoku board as a 1-dimensional array Returns : A 1D array in the Sudoku board","title":"to_1D"},{"location":"documentation/#to_2d","text":"| to_2D() A method for getting back the Sudoku board as a 2-dimensional array Returns : A 2D array in the Sudoku board","title":"to_2D"},{"location":"documentation/#to_string","text":"| to_string() -> str A method for getting back the Sudoku board as a string Returns : str - A string representation in the Sudoku board","title":"to_string"},{"location":"documentation/#to_formatted_string","text":"| to_formatted_string(cell_corner=\"\u253c\", box_corner=\"\u256c\", top_left_corner=\"\u2554\", top_right_corner=\"\u2557\", bottom_left_corner=\"\u255a\", bottom_right_corner=\"\u255d\", inner_top_tower_corner=\"\u2566\", inner_bottom_tower_corner=\"\u2569\", inner_left_floor_corner=\"\u2560\", inner_right_floor_corner=\"\u2563\", cell_horizontal_border=\"\u2500\", box_horizontal_border=\"\u2550\", cell_vertical_border=\"\u2502\", box_vertical_border=\"\u2551\", blank=\" \") -> str A method for getting back the Sudoku board as a formatted string Returns : str - A formatted string representing the Sudoku board","title":"to_formatted_string"},{"location":"documentation/#is_solved","text":"| is_solved() -> bool Check whether puzzle is solved","title":"is_solved"},{"location":"documentation/#solve","text":"| solve() -> Dict[str, int] Solve the puzzle with strategies","title":"solve"},{"location":"documentation/#has_solution","text":"| has_solution() -> bool Return whether the puzzle can be solved using strategies","title":"has_solution"},{"location":"documentation/#rate","text":"| rate() -> float Calculate the difficulty of solving the puzzle Returns : float - A difficulty score between 0 and 1","title":"rate"},{"location":"documentation/#sudokutypes","text":"","title":"sudoku.types"},{"location":"documentation/#sudokuexamples","text":"","title":"sudoku.examples"},{"location":"documentation/#sudokuexamplesrate","text":"","title":"sudoku.examples.rate"},{"location":"documentation/#sudokuexamplesshuffle","text":"","title":"sudoku.examples.shuffle"},{"location":"documentation/#sudokuexamplessolve","text":"","title":"sudoku.examples.solve"},{"location":"documentation/#sudokuexamplesboards","text":"","title":"sudoku.examples.boards"}]}